set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

" ----- Making Vim look good ------------------------------------------
Plugin 'altercation/vim-colors-solarized'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'vim-ctrlspace/vim-ctrlspace'
Plugin 'mkitt/tabline.vim'

" ----- Vim as a programmer's text editor -----------------------------
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'mhinz/vim-startify'
Plugin 'Valloric/YouCompleteMe'
Plugin 'fatih/vim-go'
Plugin 'rhysd/vim-clang-format'

" ----- Working with Git ----------------------------------------------
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'
Plugin 'zivyangll/git-blame.vim'

" ----- Code editing --------------------------------------------------
"This plugin helps splitting and joining multiple lines
Plugin 'AndrewRadev/splitjoin.vim' 

" ----- Useful snips --------------------------------------------------
Plugin 'SirVer/ultisnips'
Plugin 'ervandew/supertab'

" ------ For quickfix -------------------------------------------------
Plugin 'romainl/vim-qf'
Plugin 'bfrg/vim-qf-preview'

call vundle#end()
" END OF Vundle

filetype plugin indent on    " required
syntax on "syntax highlighting

"""""""""""""""""""""""""""""""""""""""""
""""""" Plugin-Specific Settings """"""""
"""""""""""""""""""""""""""""""""""""""""
" Set the colorscheme
" set Vim-specific sequences for RGB colors
set background=dark
let g:solarized_visibility = "high"
colorscheme solarized
" Manually set signcolumn and gitgutter's background color
highlight! link SignColumn LineNr
highlight! link GitGutterAdd DiffAdd
highlight! link GitGutterChange DiffChange
highlight! link GitGutterDelete DiffDelete
highlight! link GitGutterChangeDelete DiffChange

" ----- bling/vim-airline settings -----
" Always show statusbar
set laststatus=2

" Fancy arrow symbols, requires a patched font
" To install a patched font, run over to
"     https://github.com/abertsch/Menlo-for-Powerline
" download all the .ttf files, double-click on them and click "Install"
" Finally, uncomment the next line
" NOTE!!!! Also need to select the font Monlo-for-Powerline in the terminal preferance
let g:airline_powerline_fonts = 1

" Show PASTE if in paste mode
let g:airline_detect_paste=1
let g:airline_detect_modified=1
let g:airline#extensions#tabline#formatter = 'unique_tail'

" Show airline for tabs too
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep=' '
let g:airline#extensions#tabline#left_alt_sep='|'
let g:airline#extensions#tabline#formatter = 'default'

" Use the solarized theme for the Airline status bar
let g:airline_theme='solarized'

" ----- jistr/vim-nerdtree-tabs -----
" Open/close NERDTree Tabs
nnoremap <silent> <leader>nt :NERDTreeTabsToggle<CR>

" ----- startify do not change diretory
let g:startify_change_to_dir = 0

" ----- airblade/vim-gitgutter settings -----
" In vim-airline, only display "hunks" if the diff is non-zero
let g:airline#extensions#hunks#non_zero_only = 1
nnoremap <Leader>gb :Gblame<CR>
nnoremap :gs :Gstatus<CR>
nnoremap :gd :Gdiff<CR>

let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '>'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '^'
let g:gitgutter_sign_modified_removed = '<'
let g:gitgutter_override_sign_column_highlight = 1

" ----- ctrl-p settings ---
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\.git$\|bin\|go'
    \}
let g:ctrlp_max_files=0
let g:ctrlp_extensions = ['tag', 'dir']
let g:ctrlp_max_files=0
let g:ctrlp_max_depth=40
let g:ctrlp_regexp = 1
let g:ctrlp_switch_buffer=0
let g:ctrlp_user_command = { 'types': { 1: ['.git', 'git ls-files -oc --exclude-standard'], 2: ['.hg', 'hg --cwd %s locate -I .'], }, 'fallback': 'find %s -type f' }

" ----- YCM settings ----
" default ycm compilation flags
" let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
" disable ycm autoconfirmation
" let g:ycm_confirm_extra_conf = 0
" get identifiers from tag files
" let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_error_symbol = '✘'
let g:ycm_warning_symbol = "▲"

" let g:ycm_always_populate_location_list = 1
let g:ycm_auto_hover=""

let s:ycm_hover_popup = -1
function s:Hover()
  let response = youcompleteme#GetCommandResponse( 'GetType' )
  if response == ''
    return
  endif

  call popup_hide( s:ycm_hover_popup )
  let s:ycm_hover_popup = popup_atcursor( balloon_split( response ), {} )
endfunction

nnoremap <silent> <leader>i :call <SID>Hover()<CR>

" ---- Supertab settings ----
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" ----- go settings ----
let g:go_fmt_command = "goimports"
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"

let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_generate_tags = 1
let g:go_decls_includes = "func"

let g:go_auto_type_info = 0
let g:go_fmt_experimental = 1
let g:go_fmt_fail_silently = 1
"let g:go_doc_keywordprg_enabled = 0
" let g:go_bin_path = expand("~/goinstallbinaries/bin")
let g:go_def_mode = "godef"
"let g:go_def_mapping_enabled=0"

" -------- go settngs
" See after/ftplugin/go.vim
" build_go_files is a custom function that builds or compiles the test file.
" It calls :GoBuild if its a Go file, or :GoTestCompile if it's a test file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

" let guru scope be the whole workspace
" let g:go_guru_scope = ["pinterest.com/ads/..."]

"""""""""""""""""""""""""""""""""""""
"""""" General settings """""""""""""
"""""""""""""""""""""""""""""""""""""
set showcmd "show partial commands
set hls "highlight searches
set incsearch                   " Shows the match while typing
set ignorecase "case insensitive search
set smartcase "except for capitals
set ai "auto indent
set ruler "display cursor position
set number "display line numbers
set confirm "display confirm dialog for unsaved changes
set backspace=indent,eol,start
set noexpandtab "use spaces, not real tabs
set shiftwidth=4 "set tabs to 4 spaces
set softtabstop=4
set tabstop=8
set shiftround
set number
set smartindent
set autoindent
set cindent
set ignorecase
set noerrorbells                " No beeps
set splitright                  " Vertical windows should be split to right
set splitbelow                  " Horizontal windows should split to bottom
set autowrite                   " Automatically save before :next, :make etc.
set nocursorcolumn              " Do not highlight column (speeds up highlighting)
set nocursorline                " Do not highlight cursor (speeds up highlighting)
set hidden                      " Buffer should still exist if window is closed
set encoding=utf-8
set updatetime=100

"Code folding
set foldmethod=indent
set foldlevel=99

"Set hybrid line numbering and autotoggle
set number relativenumber

set scrolloff=10                " always show at leat five lines visable above and below cursor
augroup vimrc
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
  autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4
augroup END

" Enable to copy to clipboard for operations like yank, delete, change and put
" http://stackoverflow.com/questions/20186975/vim-mac-how-to-copy-to-clipboard-without-pbcopy
set clipboard^=unnamed

" This enables us to undo files even if you exit Vim.
if has('persistent_undo')
  set undofile
  set undodir=~/.config/vim/tmp/undo//
endif

"""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""" Mappings """"""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""
let mapleader = "\<Space>"

" Press - to turn off highlighting and clear any message already displayed.
nnoremap <silent> - :nohlsearch<Bar>:echo<CR>

"Use jk to return to normal mode
inoremap jk <Esc>
"toggle
nnoremap <Leader>zz :let &scrolloff=999-&scrolloff<CR>

"""""""""""""""""" Motion """""""""""""""""""
"Use Ctrl-a and Ctrl-e to jump to start/end of lines, like Emacs
inoremap <C-a> <Esc>^i
inoremap <C-e> <Esc>$a

"Select current word
nnoremap <Leader>w viw

"Use ctrl-a to select all
noremap <C-a> ggVG

"Up and down arrows use screen lines
noremap <Up> gk
noremap <Down> gj
inoremap <Up> <Esc>gka
inoremap <Down> <Esc>gja

nnoremap H _
nnoremap L g_
"""""""""""""""""" Editting """""""""""""""""
"Y copies until end of line
noremap Y y$
"search and replace current word
nnoremap <C-f><space> :%s/\<<C-r><C-w>\>//g<Left><Left>

"Move current line down
nnoremap <leader>_ ddp

" Remove current line
inoremap <C-d> <esc>ddi
" Toggle capitalcase words
inoremap <C-w>~ <esc>b~<esc>ea
nnoremap <C-w>~ b~<esc>e
" Turn current word to uppercase
inoremap <C-w>u <esc>viwUea
nnoremap <C-w>u viwUe

"Wrap current word with double quotes
nnoremap <leader>" viw<esc>a"<esc>bi"<esc>lel
"Wrap current word with single quotes
nnoremap <leader>' viw<esc>a"<esc>bi"<esc>lel

onoremap H _
onoremap L g_
onoremap <silent> u iw
onoremap <silent> U iW
onoremap <silent> o aw
onoremap <silent> O aW
vnoremap <silent> u iw
vnoremap <silent> U iW
vnoremap <silent> o aw
vnoremap <silent> O aW
" Operate on the current line
nnoremap <silent> vil _vg_
onoremap <silent> il :<c-u>normal! _vg_<cr>
" Operate on next brace
onoremap <silent> nb :<c-u>execute "normal! /(\r:nohlsearch\rvi("<cr>
" Operate on next brace
onoremap <silent> Nb :<c-u>execute "normal! /(\r:nohlsearch\rva("<cr>
" Operate on next curly brace
" Operate on next string, exclude the double quote
onoremap <silent> nB :<c-u>execute "normal! /\"\r:nohlsearch\rvi\""<cr>
" Operate on next string, include the double quote
onoremap <silent> NB :<c-u>execute "normal! /\"\r:nohlsearch\rva\""<cr>
onoremap <silent> n{ :<c-u>execute "normal! /{\r:nohlsearch\rvi{"<cr>
" Operate on next curly brace
onoremap <silent> N{ :<c-u>execute "normal! /{\r:nohlsearch\rva{"<cr>
" Operate on the right range side of an equation
onoremap = :<c-u>execute "normal! 0/=\r:nohlsearch\rwvg_"<cr>
" Operate on the left range side of an equation
onoremap - :<c-u>execute "normal! 0/=\r:nohlsearch\rbev^"<cr>
" Operate on an argument of a function
onoremap ia :<c-u>execute "normal! ?(\\\\|{\\\\|,\r:nohlsearch\rlma/\r:nohlsearch\rhv`a"<cr>

" Go inside the next brace
nnoremap gb :<c-u>execute "normal! /(\r:nohlsearch\rl"<cr>
" Go to the next argument, delimeters (|{|,
nnoremap ga :<c-u>execute "normal! /(\\\\|{\\\\|,\r:nohlsearch\rw"<cr>
nnoremap g{ :<c-u>execute "normal! /{\r:nohlsearch\rw"<cr>

" Quick search functions
nnoremap su :execute "normal! /" . expand("<cword>") . "\r"<cr>
nnoremap s<Space> :execute "normal! /" . expand("<cWORD>") . "\r"<cr>

" Go back to the exact spot of last modification line
nnoremap g. `.

"""""""""""" Windows and Tabs """""""""""""""
"Switch between windows
nnoremap <Tab> <C-w>w
nnoremap <S-Tab> <C-w>W
nnoremap <left> <C-w>h
nnoremap <right> <C-w>l
nnoremap <up> <C-w>k
nnoremap <down> <C-w>j
nnoremap <Leader>h <C-w>h
nnoremap <Leader>l <C-w>l
nnoremap <Leader>i <C-w>k
nnoremap <Leader>m <C-w>j
nnoremap <Leader>c <C-W>c

"Tab commands
nnoremap <CR> :tabnext<CR>
nnoremap <S-CR> :tabprevious<CR>
nnoremap th  :tabfirst<CR>
nnoremap tj  :tabprev<CR>
nnoremap tk  :tabnext<CR>
nnoremap tl  :tablast<CR>
nnoremap te  :tabedit<Space>
nnoremap t<CR> :tabedit %<CR>
nnoremap tm  :tabm<Space>
nnoremap tx  :tabclose<CR>
nnoremap tn :tabnew<CR>

nnoremap <Leader>w :w<CR>

" quickfix mappings
" let g:qf_mapping_ack_style = 1
nmap <C-j> <Plug>(qf_qf_next)
nmap <C-k> <Plug>(qf_qf_previous)
nmap <Leader>q <Plug>(qf_qf_toggle)
nmap <C-s> <Plug>(qf_qf_switch)

nmap <C-n> <Plug>(qf_loc_next)
nmap <C-m> <Plug>(qf_loc_previous)
nmap <Leader>a <Plug>(qf_loc_toggle)

""""""""""""""""" Other """""""""""""""""""""
"gdb
noremap :gdb :ConqueGdb
noremap :gdbs :ConqueGdbSplit
noremap :gdbvs :ConqueGdbVSplit

"freeze vim latex auto insert
let g:Inoremap_FreezeInoremap=1

"quick command to open and source my vimrc file
nnoremap <leader>ve :vsplit $MYVIMRC<cr>
nnoremap <leader>vs :source $MYVIMRC<cr>
"
"""""""""""""" Abbreviations """"""""""""""""
"typos and shortcuts
iabbrev adn and
iabbrev waht what
iabbrev tehn then
iabbrev vra var
augroup my_abbs
augroup END
cabb vhelp vertical help

nnoremap <Leader><Space><Space> :match ErrorMsg /\s\+$/ <cr>
nnoremap <Leader><Space>d :%s/\s\+$//g <cr>

function! Showhighlight()
    execute ":source $VIMRUNTIME/syntax/hitest.vim"
endfunction

let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
